import telebot
import json
import time
import threading
import traceback
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "–ø–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –≤ @BotFather"
ADMIN_ID =   # –í–∞—à Telegram ID

# üìÇ –§–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
COMMANDS_FILE = "commands.json"

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
def load_commands():
    try:
        with open(COMMANDS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
def save_commands(commands):
    with open(COMMANDS_FILE, "w", encoding="utf-8") as file:
        json.dump(commands, file, ensure_ascii=False, indent=4)

# üìå –ö–æ–º–∞–Ω–¥—ã –≤ –ø–∞–º—è—Ç–∏
commands = load_commands()

# ‚è≥ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
start_time = time.time()

# üìú –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
@bot.message_handler(func=lambda message: message.text.lstrip("/") in commands)
def send_prepared_text(message):
    command_text = message.text.lstrip("/")
    if command_text in commands:
        bot.send_message(message.chat.id, commands[command_text], parse_mode="HTML")

# üéõ **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**
@bot.message_handler(commands=["admin"])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="list_commands"))
    keyboard.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="delete_command"))

    bot.send_message(message.chat.id, "<b>üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=keyboard, parse_mode="HTML")

# üìã **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥**
@bot.callback_query_handler(func=lambda call: call.data == "list_commands")
def list_commands(call):
    if not commands:
        bot.send_message(call.message.chat.id, "<b>‚ùå –ö–æ–º–∞–Ω–¥ –ø–æ–∫–∞ –Ω–µ—Ç</b>", parse_mode="HTML")
        return

    text = "<b>üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n" + "\n".join([f"/{cmd}" for cmd in commands])
    bot.send_message(call.message.chat.id, text, parse_mode="HTML")

# ‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**
@bot.callback_query_handler(func=lambda call: call.data == "delete_command")
def delete_command_start(call):
    if not commands:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup()
    for cmd in commands:
        keyboard.add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å /{cmd}", callback_data=f"del_{cmd}"))
    bot.send_message(call.message.chat.id, "<b>üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", reply_markup=keyboard, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_"))
def delete_command_finish(call):
    command = call.data[4:]
    if command in commands:
        del commands[command]
        save_commands(commands)
        bot.send_message(call.message.chat.id, f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /{command} —É–¥–∞–ª–µ–Ω–∞!", parse_mode="HTML")

# ‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)**
@bot.message_handler(commands=["add"])
def add_command(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥.")
        return

    args = message.text.split(" ", 2)
    if len(args) < 3:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/add –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞</code> (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML)", parse_mode="HTML")
        return

    command, response = args[1], args[2]
    commands[command] = response
    save_commands(commands)

    bot.send_message(message.chat.id, f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>/{command}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="HTML")

# üï∞ **–ö–æ–º–∞–Ω–¥–∞ /uptime –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞**
@bot.message_handler(commands=["uptime"])
def uptime(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    uptime_seconds = time.time() - start_time
    days = uptime_seconds // (24 * 3600)
    hours = (uptime_seconds % (24 * 3600)) // 3600
    minutes = (uptime_seconds % 3600) // 60
    seconds = uptime_seconds % 60

    uptime_message = f"<b>‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</b> {int(days)} –¥–Ω. {int(hours)} —á. {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫."
    bot.send_message(message.chat.id, uptime_message, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 10 —á–∞—Å–æ–≤
def send_uptime_periodically():
    uptime_seconds = time.time() - start_time
    days = uptime_seconds // (24 * 3600)
    hours = (uptime_seconds % (24 * 3600)) // 3600
    minutes = (uptime_seconds % 3600) // 60
    seconds = uptime_seconds % 60
    uptime_message = f"<b>‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</b> {int(days)} –¥–Ω. {int(hours)} —á. {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫."
    bot.send_message(ADMIN_ID, uptime_message, parse_mode="HTML")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 10 —á–∞—Å–æ–≤ (36000 —Å–µ–∫—É–Ω–¥)
    threading.Timer(36000, send_uptime_periodically).start()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ö –≤ –õ–°
def send_error_log(error_message):
    bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{error_message}</pre>", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler():
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        send_error_log(str(e))
        error_handler()  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ uptime
send_uptime_periodically()
error_handler()
